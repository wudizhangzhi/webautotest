@pytest.mark.run(order={{order}})
@allure.story("{{testcase_name}}")
@pytest.mark.parametrize("{{params}}", {{params_values}})
def {{test_function_name}}(self, {{params}}):
    """
    {{testcase_name}}
    """
{% for op in ops %}
    {% if op.xpath %}
    {{target_dict[op.target]["element_name"]}} = self.page.element("""{{op.xpath}}""", name="{{op.target}}")
    {% endif %}

    {%- if op.op_type == "点击" %}
    self.page.click_element({{target_dict[op.target]["element_name"]}}, name="{{op.target}}")
    {%- elif op.op_type == "输入"%}
    self.page.send_keys({{target_dict[op.target]["element_name"]}}, {{target_dict[op.target]["variable_name"]}}, name="{{op.target}}")
    {%- elif op.op_type == "下拉选择" %}
    # self.page.select({{target_dict[op.target]["element_name"]}}, {{target_dict[op.target]["variable_name"]}}, name="{{op.target}}")
    time.sleep(2)
    self.page.select_by_visible_text({{target_dict[op.target]["element_name"]}}, {{target_dict[op.target]["variable_name"]}}, name="{{op.target}}")
    {%- elif op.op_type == "打开网页" %}
    self.page.open_url("{{op.value}}")
    {%- elif op.op_type == "上传" %}
    self.page.upload({{target_dict[op.target]["element_name"]}}, "{{op.value}}", name="{{op.target}}")
    {%- elif op.op_type == "人工" %}
    self.page.manual({{op.target}})
    {%- else -%}
    {%- endif -%}

    {% if op.expect_xpath %}
    {{target_dict[op.expect_target]["element_name"]}} = self.page.element("""{{op.expect_xpath}}""", name="{{op.expect_target}}")
    if {{target_dict[op.expect_target]["element_name"]}}.tag_name in ["input"]:
        value_{{target_dict[op.expect_target]["element_name"]}} = {{target_dict[op.expect_target]["element_name"]}}.get_attribute("value")
    else:
        value_{{target_dict[op.expect_target]["element_name"]}} = {{target_dict[op.expect_target]["element_name"]}}.text.strip()
    {% endif %}
    {% if op.expect_type == "存在" -%}
    assert {{target_dict[op.expect_target]["element_name"]}}
    {% elif op.expect_type == "等于" -%}
    assert value_{{target_dict[op.expect_target]["element_name"]}} == "{{op.expect_value}}"
    {% elif op.expect_type == "包含" -%}
    assert "{{op.expect_value}}" in value_{{target_dict[op.expect_target]["element_name"]}}
    {% elif op.expect_type == "是空" -%}
        assert value_{{target_dict[op.expect_target]["element_name"]}}
    {% elif op.expect_type == "非空" -%}
        assert not value_{{target_dict[op.expect_target]["element_name"]}}
    {% elif op.expect_type == "大于" -%}
        if value_{{target_dict[op.expect_target]["element_name"]}}.isdigit():
            assert int(value_{{target_dict[op.expect_target]["element_name"]}}) > op.expect_value
        else:
            assert len(value_{{target_dict[op.expect_target]["element_name"]}}) > op.expect_value
    {% elif op.expect_type == "小于" -%}
        if value_{{target_dict[op.expect_target]["element_name"]}}.isdigit():
            assert int(value_{{target_dict[op.expect_target]["element_name"]}}) < op.expect_value
        else:
            assert len(value_{{target_dict[op.expect_target]["element_name"]}}) < op.expect_value
    {%- else -%}
    {%- endif -%}


{% endfor %}