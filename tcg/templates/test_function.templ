@pytest.mark.dependency(name="{{test_function_name}}", scope="session", depends=[{% if dependency -%}"{{test_file_name}}::{{dependency}}"{% endif %}])
@allure.story("{{testcase_name}}")
@pytest.mark.parametrize("{{params}}", {{params_values}})
def {{test_function_name}}(self, {{params}}):
    """
    {{testcase_name}}
    """
{% for op in ops %}
    {% if op.xpath %}
    {{target_dict[op.target]["element_name"]}} = self.page.element("""{{op.xpath}}""", name="{{op.target}}")
    {% endif %}

    {%- if op.op_type == "点击" %}
    self.page.click_element({{target_dict[op.target]["element_name"]}}, name="{{op.target}}")
    {%- elif op.op_type == "输入"%}
    self.page.send_keys({{target_dict[op.target]["element_name"]}}, {{target_dict[op.target]["variable_name"]}}, name="{{op.target}}")
    {%- elif op.op_type == "选择" %}
    self.page.select({{target_dict[op.target]["element_name"]}}, {{target_dict[op.target]["variable_name"]}}, name="{{op.target}}")
    {%- elif op.op_type == "打开网页" %}
    self.page.open_url("{{op.value}}")
    {%- elif op.op_type == "人工" %}
    time.sleep({%- if op.target -%}{{op.target}}{%- else -%}10{%- endif -%})
    {%- else -%}
    {%- endif -%}

    {% if op.expect_xpath %}
    {{target_dict[op.expect_target]["element_name"]}} = self.page.element("""{{op.expect_xpath}}""", name="{{op.expect_target}}")
    {% endif %}
    {% if op.expect_type == "存在" -%}
    assert {{target_dict[op.expect_target]["element_name"]}}
    {% elif op.expect_type == "等于" -%}
    if {{target_dict[op.expect_target]["element_name"]}}.tag_name in ["input"]:
        assert {{target_dict[op.expect_target]["element_name"]}}.get_attribute("value") == "{{op.expect_value}}"
    else:
        assert {{target_dict[op.expect_target]["element_name"]}}.text.strip() == "{{op.expect_value}}"
    {% elif op.expect_type == "包含" -%}
    if {{target_dict[op.expect_target]["element_name"]}}.tag_name in ["input"]:
        assert "{{op.expect_value}}" in {{target_dict[op.expect_target]["element_name"]}}.get_attribute("value")
    else:
        assert "{{op.expect_value}}" in {{target_dict[op.expect_target]["element_name"]}}.text.strip()
    {%- else -%}
    {%- endif -%}


{% endfor %}